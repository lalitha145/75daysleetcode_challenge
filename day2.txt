Day 2:
1. Isomorphic Strings
Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true


Code:
class Solution {
    public boolean isIsomorphic(String s, String t) {
        HashMap<Character, Character> map = new HashMap<>();
        
        if(s == null || s.length() <= 1)
         return true;
         if(s.length()!=t.length()){
             return false;
         }
         for(int i=0;i<s.length();i++){
             char a=s.charAt(i);
             char b=t.charAt(i);
             if(map.containsKey(a)){
                 if(!map.get(a).equals(b)){
                     return false;
                 }
             }else{
                 if(!map.containsValue(b)){
                     map.put(a,b);

                 }else{
                     return false;
                 }
             }

         }
         return true;
        
    }
}


2.Is Subsequence
Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false

Code:
class Solution {
    public boolean isSubsequence(String s, String t) {
        int k=0;
       for(int i=0;i<t.length();i++){
           if(k<s.length() && s.charAt(k)==t.charAt(i)){
               k++;
               
           }

       }
       return k==s.length();
    }
}

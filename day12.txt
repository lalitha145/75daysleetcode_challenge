Day12:
1)Find All Anagrams in a String

Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

Code:
class Solution {
    public List<Integer> findAnagrams(String s, String p) {

        if (p.length() > s.length())
            return new ArrayList<>();

       
        List<Integer> result = new ArrayList<>();

        int[] s1count = new int[26];

       
        int[] s2count = new int[26];

        for (int i = 0; i<p.length(); i++){
            s1count[s.charAt(i) - 'a']++;
            s2count[p.charAt(i) - 'a']++;
        }

        if (Arrays.equals(s1count, s2count)){
            result.add(0);
        }

        
        int l = 0;
        for (int r = p.length(); r<s.length(); r++){
            s1count[s.charAt(l) - 'a']--;

            s1count[s.charAt(r) - 'a']++;

            if (Arrays.equals(s1count, s2count)){
                result.add(l+1);
            }

            l++;
        }
        return result;
    }
}

2) Longest Repeating Character Replacement

You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.

Code:


class Solution {
    public int characterReplacement(String s, int k) {
       
        int[] arr = new int[26];
        
        int largestCount = 0, beg = 0, maxlen = 0;
       
        for(int end = 0; end < s.length(); end ++){
            arr[s.charAt(end) - 'A']++;
           
            largestCount = Math.max(largestCount, arr[s.charAt(end) - 'A']);
            
            if(end - beg + 1 - largestCount > k){     
                arr[s.charAt(beg) - 'A']--;
                beg ++;
            }
           
            maxlen = Math.max(maxlen, end - beg + 1);    
        }
        return maxlen;      
    }
}

